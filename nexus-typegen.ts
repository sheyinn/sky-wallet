/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  TransactionOrderByInput: { // input type
    amount?: NexusGenEnums['Sort'] | null; // Sort
    transactionDate?: NexusGenEnums['Sort'] | null; // Sort
  }
}

export interface NexusGenEnums {
  Sort: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Account: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Category: { // root type
    color?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Query: {};
  Transaction: { // root type
    amount: number; // Float!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    currency: string; // String!
    id: string; // ID!
    reference?: string | null; // String
    transactionDate: NexusGenScalars['DateTime']; // DateTime!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  TransactionList: { // root type
    count: number; // Int!
    id?: string | null; // ID
    transactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Account: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    transactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Category: { // field return type
    color: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    transactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Query: { // field return type
    accounts: NexusGenRootTypes['Account'][]; // [Account!]!
    categories: NexusGenRootTypes['Category'][]; // [Category!]!
    transactionDetails: NexusGenRootTypes['Transaction']; // Transaction!
    transactionList: NexusGenRootTypes['TransactionList']; // TransactionList!
  }
  Transaction: { // field return type
    account: NexusGenRootTypes['Account']; // Account!
    amount: number; // Float!
    category: NexusGenRootTypes['Category'] | null; // Category
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    currency: string; // String!
    id: string; // ID!
    reference: string | null; // String
    transactionDate: NexusGenScalars['DateTime']; // DateTime!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  TransactionList: { // field return type
    count: number; // Int!
    id: string | null; // ID
    transactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
  }
}

export interface NexusGenFieldTypeNames {
  Account: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    name: 'String'
    transactions: 'Transaction'
    updatedAt: 'DateTime'
  }
  Category: { // field return type name
    color: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    name: 'String'
    transactions: 'Transaction'
    updatedAt: 'DateTime'
  }
  Query: { // field return type name
    accounts: 'Account'
    categories: 'Category'
    transactionDetails: 'Transaction'
    transactionList: 'TransactionList'
  }
  Transaction: { // field return type name
    account: 'Account'
    amount: 'Float'
    category: 'Category'
    createdAt: 'DateTime'
    currency: 'String'
    id: 'ID'
    reference: 'String'
    transactionDate: 'DateTime'
    updatedAt: 'DateTime'
  }
  TransactionList: { // field return type name
    count: 'Int'
    id: 'ID'
    transactions: 'Transaction'
  }
}

export interface NexusGenArgTypes {
  Query: {
    transactionDetails: { // args
      id: string; // String!
    }
    transactionList: { // args
      endMonth?: string | null; // String
      orderBy?: NexusGenInputs['TransactionOrderByInput'][] | null; // [TransactionOrderByInput!]
      skip?: number | null; // Int
      startMonth?: string | null; // String
      take?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}